"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.
–ü–æ–∑–≤–æ–ª—è–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–µ—Ä–≤–µ—Ä–æ–º —á–µ—Ä–µ–∑ Telegram.
"""

import subprocess
import logging
from typing import Optional
import html

logger = logging.getLogger(__name__)


class SystemService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.
    """
    
    @staticmethod
    def execute_command(command: str) -> tuple[str, bool]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
        
        Args:
            command (str): –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            
        Returns:
            tuple[str, bool]: (—Ä–µ–∑—É–ª—å—Ç–∞—Ç, —É—Å–ø–µ—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)
        """
        try:
            # logger.info(f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞: {command}")
            result = subprocess.run(
                command,
                shell=True,
                capture_output=True,
                text=True,
                timeout=30  # –¢–∞–π–º–∞—É—Ç 30 —Å–µ–∫—É–Ω–¥
            )
            
            if result.returncode == 0:
                return result.stdout.strip(), True
            else:
                error_msg = f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {result.stderr.strip()}"
                logger.error(error_msg)
                return error_msg, False
                
        except subprocess.TimeoutExpired:
            error_msg = "–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ (30 —Å–µ–∫—É–Ω–¥)"
            logger.error(error_msg)
            return error_msg, False
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {str(e)}"
            logger.error(error_msg)
            return error_msg, False
    
    @staticmethod
    def get_bot_logs() -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ª–æ–≥–∏ –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ PM, GR, FP —Å–æ–æ–±—â–µ–Ω–∏—è).
        
        Returns:
            str: –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–æ–≥–∏
        """
        command = "journalctl -u mybot --no-pager | grep 'PM; \\|GR; \\|FP;' | tail -50"
        result, success = SystemService.execute_command(command)

        if success and result:
            # –ö—Ä–∞—Ç–∫–∏–µ –ª–æ–≥–∏: –¥–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –∏ –æ–±—Ä–µ–∑–∞–µ–º —Å –∫–æ–Ω—Ü–∞
            body = SystemService._format_lines_with_highlight_and_limit(
                result.splitlines(),
                max_len=3800,
                highlights=(),
                emoji_map={"PM;": "üî¥", "GR;": "üü°", "FP;": "üü¢"},
            )
            return "üìã <b>–õ–æ–≥–∏ –±–æ—Ç–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π):</b>\n\n<code>" + body + "</code>"
        elif success:
            return "üìã <b>–õ–æ–≥–∏ –±–æ—Ç–∞:</b>\n\n–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
        else:
            return f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤:</b>\n\n{result}"
    
    @staticmethod
    def get_full_logs() -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–µ –ª–æ–≥–∏ –±–æ—Ç–∞.
        
        Returns:
            str: –ü–æ–ª–Ω—ã–µ –ª–æ–≥–∏
        """
        command = "journalctl -u mybot --no-pager -n 100"
        result, success = SystemService.execute_command(command)

        if success and result:
            body = SystemService._format_lines_with_highlight_and_limit(
                result.splitlines(),
                max_len=3800,
                highlights=("PM;", "GR;", "FP;"),
                emoji_map={"PM;": "üî¥", "GR;": "üü°", "FP;": "üü¢"},
            )
            # –ë–µ–∑ <code>, —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞–ª–æ –∂–∏—Ä–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –≤–∞–∂–Ω—ã—Ö —Å—Ç—Ä–æ–∫
            return "üìã <b>–ü–æ–ª–Ω—ã–µ –ª–æ–≥–∏ –±–æ—Ç–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å—Ç—Ä–æ–∫):</b>\n\n" + body
        else:
            return f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤:</b>\n\n{result}"

    @staticmethod
    def _format_lines_with_highlight_and_limit(
        lines: list[str],
        max_len: int,
        highlights: tuple[str, ...],
        emoji_map: dict[str, str] | None = None,
    ) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫–∏ HTML: –¥–µ–ª–∞–µ—Ç –∂–∏—Ä–Ω—ã–º–∏ —Å—Ç—Ä–æ–∫–∏ —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏ –∏ –æ–±—Ä–µ–∑–∞–µ—Ç —Å –∫–æ–Ω—Ü–∞.

        - –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ HTML-—ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç—Å—è
        - –°—Ç—Ä–æ–∫–∏ —Å –ª—é–±—ã–º –∏–∑ –º–∞—Ä–∫–µ—Ä–æ–≤ –≤ `highlights` –æ–±–æ—Ä–∞—á–∏–≤–∞—é—Ç—Å—è –≤ <b>
        - –°—Ç—Ä–æ–∫–∏ —Å–æ–µ–¥–∏–Ω—è—é—Ç—Å—è —á–µ—Ä–µ–∑ <br>
        - –ò—Ç–æ–≥–æ–≤–∞—è –¥–ª–∏–Ω–∞ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç—Å—è `max_len`, –Ω–∞—á–∏–Ω–∞—è —Å —Ö–≤–æ—Å—Ç–∞
        """
        rendered_lines: list[str] = []

        def render_line(raw: str) -> str:
            prefix = ""
            matched_highlight = False
            found_marker = None
            if emoji_map or highlights:
                for marker in (emoji_map.keys() if emoji_map else highlights):
                    if marker in raw:
                        found_marker = marker
                        break
                if found_marker and emoji_map and found_marker in emoji_map:
                    prefix = emoji_map[found_marker] + " "
                if found_marker and highlights and found_marker in highlights:
                    matched_highlight = True
            esc = html.escape(prefix + raw)
            if matched_highlight:
                return f"<b>{esc}</b>\n"
            return f"{esc}\n"

        # –ù–∞–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –∫–æ–Ω—Ü–∞, –ø–æ–∫–∞ –Ω–µ —É–ø—Ä–µ–º—Å—è –≤ –ª–∏–º–∏—Ç
        current_len = 0
        cutoff_reached = False
        for raw in reversed(lines):
            piece = render_line(raw)
            piece_len = len(piece)
            if current_len + piece_len > max_len:
                cutoff_reached = True
                break
            rendered_lines.append(piece)
            current_len += piece_len

        body = "".join(reversed(rendered_lines))
        if cutoff_reached:
            body = "... (–ª–æ–≥–∏ –æ–±—Ä–µ–∑–∞–Ω—ã, –ø–æ–∫–∞–∑–∞–Ω –∫–æ–Ω–µ—Ü)\n" + body
        return body or "–ù–µ—Ç —Å—Ç—Ä–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
    
    @staticmethod
    def stop_bot() -> str:
        """
        –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞.
        
        Returns:
            str: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        command = "systemctl stop mybot"
        result, success = SystemService.execute_command(command)
        
        if success:
            return "üõë <b>–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n\n–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
        else:
            return f"‚ùå <b>–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞:</b>\n\n{result}"
    
    @staticmethod
    def get_bot_status() -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞.
        
        Returns:
            str: –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
        """
        command = "systemctl status mybot --no-pager --lines=0"
        result, success = SystemService.execute_command(command)
        
        if success and result:
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∏ –æ–±—Ä–µ–∑–∞–µ–º —Å –∫–æ–Ω—Ü–∞, –ø–æ–∫–∞–∑—ã–≤–∞—è —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Å—Ç–∞—Ç—É—Å–∞
            escaped = html.escape(result)
            max_len = 3800
            if len(escaped) > max_len:
                escaped = "... (—Å—Ç–∞—Ç—É—Å –æ–±—Ä–µ–∑–∞–Ω, –ø–æ–∫–∞–∑–∞–Ω –∫–æ–Ω–µ—Ü)\n" + escaped[-max_len:]
            return f"üìä <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:</b>\n\n<code>{escaped}</code>"
        else:
            return f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:</b>\n\n{result}"
    
    @staticmethod
    def get_system_info() -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ.
        
        Returns:
            str: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
        """
        commands = [
            ("uptime", "–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã"),
            ("free -h", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏"),
            ("df -h /", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞"),
            ("ps aux | grep mybot | grep -v grep", "–ü—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞")
        ]
        
        result_parts = []
        for command, description in commands:
            output, success = SystemService.execute_command(command)
            if success and output:
                result_parts.append(f"<b>{description}:</b>\n<code>{output}</code>")
        
        if result_parts:
            return "üñ•Ô∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:</b>\n\n" + "\n\n".join(result_parts)
        else:
            return "‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ</b>"


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
system_service = SystemService()
