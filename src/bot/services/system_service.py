"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.
–ü–æ–∑–≤–æ–ª—è–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–µ—Ä–≤–µ—Ä–æ–º —á–µ—Ä–µ–∑ Telegram.
"""

import subprocess
import logging
from typing import Optional

logger = logging.getLogger(__name__)


class SystemService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.
    """
    
    @staticmethod
    def execute_command(command: str) -> tuple[str, bool]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
        
        Args:
            command (str): –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            
        Returns:
            tuple[str, bool]: (—Ä–µ–∑—É–ª—å—Ç–∞—Ç, —É—Å–ø–µ—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)
        """
        try:
            logger.info(f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞: {command}")
            result = subprocess.run(
                command,
                shell=True,
                capture_output=True,
                text=True,
                timeout=30  # –¢–∞–π–º–∞—É—Ç 30 —Å–µ–∫—É–Ω–¥
            )
            
            if result.returncode == 0:
                return result.stdout.strip(), True
            else:
                error_msg = f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {result.stderr.strip()}"
                logger.error(error_msg)
                return error_msg, False
                
        except subprocess.TimeoutExpired:
            error_msg = "–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ (30 —Å–µ–∫—É–Ω–¥)"
            logger.error(error_msg)
            return error_msg, False
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {str(e)}"
            logger.error(error_msg)
            return error_msg, False
    
    @staticmethod
    def get_bot_logs() -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ª–æ–≥–∏ –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ PM, GR, FP —Å–æ–æ–±—â–µ–Ω–∏—è).
        
        Returns:
            str: –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–æ–≥–∏
        """
        command = "journalctl -u mybot | grep 'PM; \\|GR; \\|FP;' | tail -50"
        result, success = SystemService.execute_command(command)
        
        if success and result:
            return f"üìã <b>–õ–æ–≥–∏ –±–æ—Ç–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π):</b>\n\n<code>{result}</code>"
        elif success:
            return "üìã <b>–õ–æ–≥–∏ –±–æ—Ç–∞:</b>\n\n–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
        else:
            return f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤:</b>\n\n{result}"
    
    @staticmethod
    def get_full_logs() -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–µ –ª–æ–≥–∏ –±–æ—Ç–∞.
        
        Returns:
            str: –ü–æ–ª–Ω—ã–µ –ª–æ–≥–∏
        """
        command = "journalctl -u mybot --no-pager -n 100"
        result, success = SystemService.execute_command(command)
        
        if success and result:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(result) > 4000:
                result = result[:4000] + "\n\n... (–ª–æ–≥–∏ –æ–±—Ä–µ–∑–∞–Ω—ã)"
            return f"üìã <b>–ü–æ–ª–Ω—ã–µ –ª–æ–≥–∏ –±–æ—Ç–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å—Ç—Ä–æ–∫):</b>\n\n<code>{result}</code>"
        else:
            return f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤:</b>\n\n{result}"
    
    @staticmethod
    def stop_bot() -> str:
        """
        –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞.
        
        Returns:
            str: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        command = "systemctl stop mybot"
        result, success = SystemService.execute_command(command)
        
        if success:
            return "üõë <b>–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n\n–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
        else:
            return f"‚ùå <b>–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞:</b>\n\n{result}"
    
    @staticmethod
    def get_bot_status() -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞.
        
        Returns:
            str: –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
        """
        command = "systemctl status mybot --no-pager"
        result, success = SystemService.execute_command(command)
        
        if success and result:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(result) > 4000:
                result = result[:4000] + "\n\n... (—Å—Ç–∞—Ç—É—Å –æ–±—Ä–µ–∑–∞–Ω)"
            return f"üìä <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:</b>\n\n<code>{result}</code>"
        else:
            return f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:</b>\n\n{result}"
    
    @staticmethod
    def get_system_info() -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ.
        
        Returns:
            str: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
        """
        commands = [
            ("uptime", "–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã"),
            ("free -h", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏"),
            ("df -h /", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞"),
            ("ps aux | grep mybot | grep -v grep", "–ü—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞")
        ]
        
        result_parts = []
        for command, description in commands:
            output, success = SystemService.execute_command(command)
            if success and output:
                result_parts.append(f"<b>{description}:</b>\n<code>{output}</code>")
        
        if result_parts:
            return "üñ•Ô∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:</b>\n\n" + "\n\n".join(result_parts)
        else:
            return "‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ</b>"


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
system_service = SystemService()
