"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞.
–ü–æ–∑–≤–æ–ª—è–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü—É —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–µ—Ä–≤–µ—Ä–æ–º —á–µ—Ä–µ–∑ Telegram.
"""

from aiogram.types import Message
import asyncio
import subprocess

from src.config.settings import OWNER_CHAT_ID
from src.bot.services.system_service import system_service


async def handle_owner_command(message: Message) -> bool:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞.
    
    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        bool: True, –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞
    if message.from_user.id != OWNER_CHAT_ID:
        return False
    
    # –†–∞–∑—Ä–µ—à–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≤ –ª—é–±–æ–º —Ç–∏–ø–µ —á–∞—Ç–∞ (–ª–∏—á–∫–∞ –∏–ª–∏ –≥—Ä—É–ø–ø–∞)
    
    text = message.text.lower().strip()
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞–∫ PM/GR –ø–æ –º–µ—Å—Ç—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    user_login = f"@{message.from_user.username}" if message.from_user.username else ""
    tag = "GR" if message.chat.type in ("group", "supergroup") else "PM"
    print(f"{tag}; –û—Ç {user_login} ({message.from_user.full_name}): –∑–∞–ø—Ä–æ—Å '{message.text}'")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    if text == "logs":
        response = system_service.get_bot_logs()
        await message.answer(response, parse_mode="HTML")
        return True
    
    elif text == "full logs":
        response = system_service.get_full_logs()
        await message.answer(response, parse_mode="HTML")
        return True
    
    elif text == "stop bot":
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–æ–±—â–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü—É, –∑–∞—Ç–µ–º –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª—É–∂–±—É –≤ —Ñ–æ–Ω–µ –±–µ–∑ –ª–æ–≥–æ–≤/–æ—Ç–≤–µ—Ç–æ–≤
        await message.answer("üõë <b>–ë–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...</b>", parse_mode="HTML")
        async def _stop_service():
            try:
                # –§–æ–Ω–æ–≤–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–µ–∑ –∑–∞—Ö–≤–∞—Ç–∞ –≤—ã–≤–æ–¥–∞, –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
                await asyncio.to_thread(
                    subprocess.run,
                    "systemctl stop mybot",
                    shell=True,
                    check=False,
                    capture_output=False,
                    text=True,
                )
            except Exception:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ª—é–±—ã–µ –æ—à–∏–±–∫–∏ ‚Äî –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è SIGTERM
                pass
        asyncio.create_task(_stop_service())
        return True
    
    elif text == "status":
        response = system_service.get_bot_status()
        await message.answer(response, parse_mode="HTML")
        return True
    
    elif text == "system":
        response = system_service.get_system_info()
        await message.answer(response, parse_mode="HTML")
        return True
    
    elif text == "help" or text == "–∫–æ–º–∞–Ω–¥—ã":
        help_text = """
üîß <b>–ö–æ–º–∞–Ω–¥—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞:</b>

<b>–õ–æ–≥–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</b>
‚Ä¢ <code>logs</code> - –õ–æ–≥–∏ –±–æ—Ç–∞ (PM, GR, FP —Å–æ–æ–±—â–µ–Ω–∏—è)
‚Ä¢ <code>full logs</code> - –ü–æ–ª–Ω—ã–µ –ª–æ–≥–∏ –±–æ—Ç–∞
‚Ä¢ <code>status</code> - –°—Ç–∞—Ç—É—Å —Å–ª—É–∂–±—ã –±–æ—Ç–∞
‚Ä¢ <code>system</code> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ

<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>
‚Ä¢ <code>stop bot</code> - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞

<b>–î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è:</b>
‚Ä¢ <code>–¥—Ä</code> ‚Äî –±–ª–∏–∂–∞–π—à–∏–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è (–≤ –±–µ—Å–µ–¥–µ –∏ –≤ –õ–° –≤–ª–∞–¥–µ–ª—å—Ü–∞)
‚Ä¢ <code>–¥—Ä @username</code> ‚Äî –¥–∞—Ç–∞ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ –±–µ—Å–µ–¥–µ –∏ –≤ –õ–° –≤–ª–∞–¥–µ–ª—å—Ü–∞)

<b>–°–ø—Ä–∞–≤–∫–∞:</b>
‚Ä¢ <code>help</code> –∏–ª–∏ <code>–∫–æ–º–∞–Ω–¥—ã</code> - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

        """
        await message.answer(help_text, parse_mode="HTML")
        return True
    
    return False


def register_owner_handlers(dp):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ.
    
    Args:
        dp: –î–∏—Å–ø–µ—Ç—á–µ—Ä aiogram
    """
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ø–µ—Ä–µ–¥ –æ–±—ã—á–Ω—ã–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
    # –≤ —Ñ—É–Ω–∫—Ü–∏–∏ on_mention_or_reply –≤ chat.py
    pass
