"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —á–∞—Ç–∞.
–°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –±–æ—Ç–∞.
"""

from pprint import pprint
import asyncio
from aiogram.types import Message
from aiogram.enums import ChatAction

from src.config.settings import PROMPT_TEMPLATE_CHAT, OWNER_CHAT_ID, CHAT_ID, TIMEZONE
from src.bot.services.llm_service import LLMService
from src.bot.services.context_service import context_service
from src.bot.services.birthday_service import birthday_service
from src.utils.text_utils import get_first_name_by_login
from src.utils.date_utils import format_birthday_date
from src.bot.handlers.owner_commands import handle_owner_command


async def on_mention_or_reply(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –±–æ—Ç–∞ –∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö.
    
    Args:
        message (Message): –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –±–æ—Ç–∞ –≤ –Ω–∞—á–∞–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏
    bot = message.bot
    bot_info = await bot.get_me()
    bot_username = f"@{bot_info.username}"
    
    # –ö–æ–º–∞–Ω–¥—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—é—Ç—Å—è –Ω–∏–∂–µ (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤)

    # –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞ –¥–ª—è –Ω–µ-–≤–ª–∞–¥–µ–ª—å—Ü–µ–≤, —á—Ç–æ–±—ã –Ω–µ —É—Ö–æ–¥–∏–ª–∏ –≤ LLM
    if message.text:
        normalized_text = message.text.lower().strip()
        owner_commands = {
            "help",
            "–∫–æ–º–∞–Ω–¥—ã",
            "logs",
            "full logs",
            "stop bot",
            "status",
            "system",
        }
        if normalized_text in owner_commands:
            # –ï—Å–ª–∏ –ø–∏—à–µ—Ç –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü ‚Äî –æ—Ç–∫–∞–∑—ã–≤–∞–µ–º
            if message.from_user.id != OWNER_CHAT_ID:
                user_login = f"@{message.from_user.username}" if message.from_user.username else ""
                if message.chat.type in ("group", "supergroup"):
                    print(f"GR; –û—Ç {user_login} ({message.from_user.full_name}): –ø–æ–ø—ã—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã '{message.text}' ‚Äî –æ—Ç–∫–∞–∑–∞–Ω–æ")
                else:
                    print(f"PM; –û—Ç {user_login} ({message.from_user.full_name}): –ø–æ–ø—ã—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã '{message.text}' ‚Äî –æ—Ç–∫–∞–∑–∞–Ω–æ")
                await message.answer(
                    "‚ùå <b>–í –¥–æ—Å—Ç—É–ø–µ –æ—Ç–∫–∞–∑–∞–Ω–æ</b>\n\n–≠—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞.",
                    parse_mode="HTML",
                )
                return
            # –ï—Å–ª–∏ —ç—Ç–æ –≤–ª–∞–¥–µ–ª–µ—Ü (–≤ –õ–° –∏–ª–∏ –≤ –≥—Ä—É–ø–ø–µ), –ø–µ—Ä–µ–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Ö–µ–Ω–¥–ª–µ—Ä—É
            if await handle_owner_command(message):
                return

    # –ü—É–±–ª–∏—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã "–¥—Ä" –∏ "–¥—Ä @username":
    # - –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–º –≤ –±–µ—Å–µ–¥–µ CHAT_ID (–ø—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –±–æ—Ç–∞ –∏–ª–∏ –æ—Ç–≤–µ—Ç–µ –µ–º—É)
    # - –¥–æ—Å—Ç—É–ø–Ω—ã –≤–ª–∞–¥–µ–ª—å—Ü—É —Ç–∞–∫–∂–µ –≤ –õ–°
    if message.text:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
        # bot, bot_info, bot_username —É–∂–µ –ø–æ–ª—É—á–µ–Ω—ã –≤—ã—à–µ
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –æ—Ç–≤–µ—Ç—ã
        is_mention = any(token == bot_username for token in message.text.split())
        is_reply = (message.reply_to_message and message.reply_to_message.from_user.id == bot_info.id)
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–∫—Å—Ç, —É–±–∏—Ä–∞—è —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞
        text_for_commands = message.text
        if is_mention:
            # –£–±–∏—Ä–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–∞–Ω–¥
            text_for_commands = " ".join([token for token in message.text.split() if token != bot_username])
        
        normalized_text = text_for_commands.lower().strip()
        
        is_group_context = (
            message.chat.type in ("group", "supergroup") and message.chat.id == CHAT_ID
        )
        is_owner_pm = (
            message.chat.type == "private" and message.from_user and message.from_user.id == OWNER_CHAT_ID
        )
        
        should_process_birthday_command = (
            is_owner_pm or 
            (is_group_context and (is_mention or is_reply))
        )

        if normalized_text == "–¥—Ä" and should_process_birthday_command:
            user_login_log = f"@{message.from_user.username}" if message.from_user.username else ""
            tag = "GR" if is_group_context else "PM"
            print(f"{tag}; –û—Ç {user_login_log} ({message.from_user.full_name}): –∑–∞–ø—Ä–æ—Å '–¥—Ä'")
            notification = birthday_service.get_next_birthday_notification(TIMEZONE)
            await message.reply(notification or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–ª–µ–¥—É—é—â–µ–º –¥–Ω–µ —Ä–æ–∂–¥–µ–Ω–∏—è")
            return

        if normalized_text.startswith("–¥—Ä ") and should_process_birthday_command:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª–æ–≥–∏–Ω–∞
            parts = text_for_commands.strip().split()
            if len(parts) >= 2 and parts[1].startswith("@"):
                query_login = parts[1]
                found_user = None
                for user in birthday_service.users:
                    if user.user_login and user.user_login.lower() == query_login.lower():
                        found_user = user
                        break
                user_login_log = f"@{message.from_user.username}" if message.from_user.username else ""
                tag = "GR" if is_group_context else "PM"
                print(f"{tag}; –û—Ç {user_login_log} ({message.from_user.full_name}): –∑–∞–ø—Ä–æ—Å '–¥—Ä {query_login}'")
                if found_user:
                    pretty_date = format_birthday_date(found_user.birthday)
                    await message.reply(f"{found_user.name} –æ—Ç–º–µ—á–∞–µ—Ç –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è {pretty_date}")
                else:
                    await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è")
                return

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è LLM
    if not message.text:
        return
        
    chat_id = message.chat.id
    text = message.text or ""
    # bot, bot_info, bot_username —É–∂–µ –ø–æ–ª—É—á–µ–Ω—ã –≤—ã—à–µ –¥–ª—è –∫–æ–º–∞–Ω–¥ "–¥—Ä"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not _should_process_message(message, bot_username, bot_info.id):
        return

    # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_login = _extract_user_login(message, text, bot_username)
    
    # –ù–∞—Ö–æ–¥–∏–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ª–æ–≥–∏–Ω—É
    first_name = get_first_name_by_login(user_login, birthday_service.users)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è LLM
    messages = _build_llm_messages(chat_id, text)

    # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –±–æ—Ç –¥—É–º–∞–µ—Ç –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º
    temp_msg = None
    try:
        temp_msg = await message.reply("üß† –ú–Ω–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –¥—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")
    except Exception:
        temp_msg = None

    # –≠—Ñ—Ñ–µ–∫—Ç "–ø–µ—á–∞—Ç–∞–µ—Ç..." –∏ –∑–∞–ø—Ä–æ—Å –∫ LLM –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ event loop
    stop_event = asyncio.Event()

    async def _typing_indicator():
        try:
            while not stop_event.is_set():
                await message.bot.send_chat_action(message.chat.id, action=ChatAction.TYPING)
                await asyncio.sleep(4)
        except Exception:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
            pass

    typing_task = asyncio.create_task(_typing_indicator())
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π HTTP-–∑–∞–ø—Ä–æ—Å –≤ –ø—É–ª–µ –ø–æ—Ç–æ–∫–æ–≤
        answer_body = await asyncio.to_thread(LLMService.send_chat_request, messages)
    finally:
        stop_event.set()
        try:
            await typing_task
        except Exception:
            pass
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context_service.save_context(chat_id, message.text, answer_body)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    final_answer = _format_final_answer(first_name, answer_body)
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    import html
    safe_answer = html.escape(final_answer)
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç–≤–µ—Ç–∞
    if temp_msg:
        try:
            await temp_msg.delete()
        except Exception:
            pass
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    await _send_response(message, safe_answer, user_login, text)


def _should_process_message(message: Message, bot_username: str, bot_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.
    
    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        bot_username (str): –ò–º—è –±–æ—Ç–∞ —Å @
        bot_id (int): ID –±–æ—Ç–∞
        
    Returns:
        bool: True, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
    """
    # –í –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ
    if message.chat.type not in ("group", "supergroup"):
        return True
    
    # –í –≥—Ä—É–ø–ø–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–ª–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @username
    is_mention = any(token == bot_username for token in (message.text or "").split())
    is_reply = (
        message.reply_to_message
        and message.reply_to_message.from_user.id == bot_id
    )
    
    return is_mention or is_reply


def _extract_user_login(message: Message, text: str, bot_username: str) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è.
    
    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ
        text (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        bot_username (str): –ò–º—è –±–æ—Ç–∞ —Å @
        
    Returns:
        str: –õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, –±–µ—Ä–µ–º –ª–æ–≥–∏–Ω —Ç–æ–≥–æ, –∫—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç
    if message.from_user and message.from_user.username:
        return "@" + message.from_user.username
    
    # –ò–Ω–∞—á–µ –∏—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ (–∫—Ä–æ–º–µ —Å–∞–º–æ–≥–æ –±–æ—Ç–∞)
    if any(token == bot_username for token in text.split()):
        for token in text.split():
            if token.startswith("@") and token != bot_username:
                return token
    
    return ""


def _build_llm_messages(chat_id: int, current_text: str) -> list:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ LLM.
    
    Args:
        chat_id (int): ID —á–∞—Ç–∞
        current_text (str): –¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        
    Returns:
        list: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è LLM
    """
    messages = [
        {
            "role": "system",
            "content": PROMPT_TEMPLATE_CHAT
        }
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
    prev_context = context_service.get_context(chat_id)
    if prev_context:
        messages.append({"role": "user", "content": prev_context[0]})
        messages.append({"role": "assistant", "content": prev_context[1]})
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
    messages.append({"role": "user", "content": current_text})
    
    return messages


def _format_final_answer(first_name: str, answer_body: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –æ–±—Ä–∞—â–µ–Ω–∏–µ–º –ø–æ –∏–º–µ–Ω–∏.
    
    Args:
        first_name (str): –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        answer_body (str): –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç –æ—Ç LLM
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    """
    if first_name:
        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∏–º—è, –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–µ
        return f"{first_name}, {answer_body[:1].lower() + answer_body[1:]}"
    else:
        return answer_body


async def _send_response(message: Message, final_answer: str, user_login: str, original_text: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    
    Args:
        message (Message): –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        final_answer (str): –û—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        user_login (str): –õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        original_text (str): –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.chat.type in ("group", "supergroup"):
        pprint(f"GR; –û—Ç {user_login} ({message.from_user.full_name}): {original_text}")
        await message.reply(final_answer, parse_mode="HTML")
    else:
        pprint(f"PM; –û—Ç {user_login} ({message.from_user.full_name}): {original_text}")
        await message.answer(final_answer, parse_mode="HTML")


def register_chat_handlers(dp):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —á–∞—Ç–∞ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ.
    
    Args:
        dp: –î–∏—Å–ø–µ—Ç—á–µ—Ä aiogram
    """
    dp.message.register(on_mention_or_reply)
